IDE -> Integrated Development Environment
SDK | JDK (version of Java is nothing but Version of JDK)
JDK of 20,17,15 having breakdown features
JDK-> Java Development Kit | JRE-> Java Runtime Environment | JVM-> Java Virtual Machine
SDK-> Software Development Kit

JRE vs JVM vs JDK
JRE => Having class Libraries,It includes JVM in it, Tools in it
JVM => Place to run or execute the java applications (Platform Independent)
    => can run bytecode file,class loader ,heap, stack memory
JDK => It includes JRE in it, contains Development tools

simple.java => compiler => simple.class(bytecodes) => run (JVM)

Objected Oriented Languages => Considered each and every element is called as object
Java is platform independent language => it can run on any OS because of bytecode structure
API => Application Program interface
WORA => write once and run anywhere

Java Used in:
standalone
web application=> spring, hibernate
Enterprise
Mobile application => Android, iOS

Object | Classes

Dog => states/properties => legs,ears,color,breed,name
    => behaviours => barking, eating, sniffing

Class => blueprint => legs,ears,color,breed,name
                   =>  barking, eating, sniffing

Object => Dog

Access Modifier (Class, variable, method, constructor) they manage to access these
                default => if we don't mention it
                private => class only
                public => anyone
                protected => package and subclass

Non-Access Modifier
    Static
    Final
    abstract
    (synchronised, volatile) => used in threats

You can have multiple main methods in java just but changing parameters(String args[]) - IMP

Types of Variables => Changes with Placement of Day1.Variable
local
instance
static

Private is recommended for the instance variable (call must by using object variable)
Static variable can be shared by all copies of methods (i.e.., That can be called without calling the object variable)
local variable must be initialized (call must by using object variable)

Data Types => primitive -> int,double,float,char
           => non-primitive(Data Structures) -> String, Array, list

Operators  => arithmetic, boolean, comparative, logical

type casting =>widening ,narrowing
byte - short - char - int - long - float - double
--->>>> widening (automatically)
                                narrowing(manually) <<<----

-----------Day-2-----------

Do local variable have default value ? No, It can be possible in only static and Instance
Can local variable can be accessed from other methods? -- Yes, by calling an object

local variable don't need access modifiers and static,Instance variable need access modifiers

Loops

for loop -> for(initialize expr;test expr;update expr){
    statements to execute
}

while loop

-----------Day-3-----------

Switch-case --> Alternative of if-else ladder

Arrays:
    non primitive data types => bcoz.. they are not predefined
    contains elements of same datatype
    is an object, length method instead of size
    contiquous memory location => by indexing

One Dimensional Array:
    declaration : datatype[] arrayname; (or) datatype arrayname[]; => pointing reference
    instantiating the array : arrayname = new datatype[length];
    initialize : arrayname = {1,2,3,4,5};
    int[] arr= new int[]{4,5,6,7};
    int[] arr = {1,2,3,4,5,6}; // this is accepted in the modern java

. . Java is pass by value but inside it is pass by reference

Disadvantage of array :
    fixed size we can't alter the size of array once it fixed

Day3.Strings:

Comparison =>  == (or) .equals()

-----------Day-4-----------

Encapsulation : hiding certain information to user or giving some access to data

bundling or organising data or properties or fields and functions or method => single unit

class. its own fields and methods

data hiding

placing instance variables in private

getter and setter methods.

Immutable classes => one they are set then we can't change the values
    - It can be attained by removing set methods only
    - only get methods
    or - class final, properties => private or final, don't provider setter methods, only getter methods

Inheritance :
    - one class (subclass or child) inherit properties and methods from the another class(parent or superclass)
    Two types or inheritance - single and multilevel inheritance
is - a relationship
vehicle => car,bus,cycle
car

-----------Day-5-----------

Topics:
    method overloading
    method overriding
    polymorphism
    Abstraction

Polymorphism : objects displaying various behaviours on environment

two types : compile type and run time polymorphism

these can be achieved by using overloading -> method and operator overloading
compile type polymorphism can be attained by method overloading and also called as static binding or early binding
runtime polymorphism can be attained by operator overloading and also called as Dynamic binding or late binding

access modifier return type methodsname(arg) in method overloading

Abstraction => it can be implemented by two types

Abstract classes
Interface

these both have very basic difference looks very similar

the difference is in Declaration
1. Encapsulation
person class  => entity class => it contains properties or fields => username,passwords , getter and setter methods => encapsulation
2. Abstraction
class specifically(abstract classes/interface) that will abstract the methods => method signature without body
login class => implementation/execution/business logic, create a user, signin , signout

Basically Abstraction is process of hiding th implementation detail and showing one lead that
you can do this or do that with this like that

Multiple inheritance can be achieved by interface

-----------Day-6-----------

Collections => framework => architecture to store and manipulate the groups of objects
Collections contains => set of interface and classes to implement the interface

Interface => List,Set,Queue and Map
Classes=> ArrayList,LinkedList
Common methods=> add,remove,iterate,search
Sorting,Searching => Collections is a class => sort(),contains(),indexOf()
Iterations:
Generics: ensure type safety   =>V V Imp (not covered in the syllabus)
Utility class: Collections class=> max,reversing
Wrapper Class: int => Integer, double => Double

List<int> list = new List<>();      XX not allowed
List<Integer> list = new List<>();

    iterable => interface
    Collection => interface

List Interface        Set Interface         Queue Interface  => all these three interface they implement methods from the parent collections
    ''''
ArrayList => Class
LinkedList => Class

interface extends interface
interface implements class

Iterable: it is an Parent or root Interface , Contains one abstract class called iterator()=>return iterator object over the elements

Collection: it is Interface

List interface: ordered collections of data,indexing, Duplicates values
ArrayList,LinkedList,vector, and stack, non synchronised

Arraylist => dynamic array to store data, order maintained, faster in terms of adding and iterating
contiguous memory location. 12,24,56,12= 112, 24=> 116, 56=> 120
manipulation array is slower







-----------Day-11-----------

checked exe => try catch or with throw and throws keyword


-----------Day-12-----------

File operations: under java.io package

File is an abstract datatype
stream => byte stream | character stream

Character Stream handled by Reader class it is an abstract class
subclasses :
FileReader
BufferedReader
CharArrayReader
FilterReader
StringReader

=> Writer class
    - FileWriter
    - BufferedWriter
ByteStream : => InputStreamClass
FileInputStream
BufferedInputStream
ByteArrayInputStream
DataInputStream

=> OutputStream
    FileOutputStream
    BufferedOutputStream

Buffered Reader reads line by line where as File reader reads by char by char
FileInputStream reads the characters to extract the byte code from the file

FileReader => is recommended for reading the text or char

If file size is larger BufferedInputStream is very faster